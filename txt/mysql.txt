
****************************************************************************************** 
mysql或mariadb
************************************************************ 
安装        
ubuntu      sudo apt install mysql-server 
ubuntu      sudo apt install mariadb-server
debian      sudo apt install mariadb-server
centos      sudo yum install mysql-server 
************************************************************ 
mysql [-uUser] [-pPASSWORD] [-hIP] [-Pport] [dbName] 
    功能        登录MYSQL数据库 
    权限        root        登录所有用户
                其他用户    如果配置了不允许远程登录mysql的root用户功能时，则不能登录mysql的root用户 
    User        mysql用户名,省略此参数时默认用户名为linux的当前用户名
    PASSWORD    mysql密码,省略-p表示不使用密码;省略PASSWORD表示在确认键按下以后输入密码 
    IP          mysql服务器IP或域名,省略此参数则默认为localhost 
    port        mysql服务器端口,省略此参数则默认为3306端口 
    dbName      数据库名,省略此参数时则表示不使用任何数据库,可在连接成功后选择要使用的数据库 
***********************************************************************************************************************
mysql
*****************************************************************************************
字段命名规则：
不区分大小写，在命名时应该使用"下划线命名法"
*****************************************************************************************
配置 
************************************************************
初次密码配置：
1、启动mysql服务,安装过程中若提示设置密码,请设置为空:sudo service mysql start 
2、初次登录:sudo mysql
3、设置root密码
    update `mysql`.`user` set `authentication_string`=password('root'),`plugin`='mysql_native_password' where `user`='root';flush privileges;
    如果出错则:
    update `mysql`.`user` set `password`=password('root') where `user`='root';flush privileges;
************************************************************
忘记root密码重新设置:
1、打开/etc/mysql/my.cnf查看文件
2、进入!includedir包含的路径(/etc/mysql/mariadb.conf.d/或/etc/mysql/mysql.conf.d/)
3、编辑50-server.cnf或mysqld.cnf文件:在[mysqld]下添加一行skip-grant-tables,保存
4、参照"初次密码配置"第3步
5、编辑50-server.cnf或mysqld.cnf文件:在[mysqld]下注释掉skip-grant-tables,保存
6、重启mysql:sudo service mysql restart
************************************************************
端口配置远程访问:
1、打开/etc/mysql/my.cnf查看文件
2、进入!includedir包含的路径(/etc/mysql/mariadb.conf.d/或/etc/mysql/mysql.conf.d/)
3、编辑50-server.cnf或mysqld.cnf文件:更改[mysqld]下的port值为想要的端口(如果被注释,须取消注释);更改[mysqld]下的bind-address值为0.0.0.0 
4、登录mysql配置远程访问权限:update `mysql`.`user` set `host`='%' where `user`='root';flush privileges;
5、退出mysql重启mysql服务:sudo service mysql restart
*****************************************************************************************
用户 
*************************************************
CREATE USER 'username'@'host' IDENTIFIED BY 'password';      
    功能            创建用户
    usename         用户名
    host            可登录地址
                        %表示通配符,如'192.168.35.%'表示IP是前部是'192.168.35.'的都可以访问;'%'表示所有IP都可以访问
                        localhost表示本地IP
    password        密码
*************************************************
DROP USER 'username'@'host'    
    功能            删除用户
    username        用户名
    host            可登录地址 
*************************************************
RENAME USER 'old_username'@'old_host' to 'new_usename'@'new_host';
或
UPDATE mysql.`user` set `user`='new_usename' WHERE `user`='old_username';FLUSH PRIVILEGES;    
    功能            更改用户名
    old_username    旧用户名
    old_host        旧host
    new_usename     新用户名
    new_host        新host
*************************************************
UPDATE mysql.`user` set `Host`='new_host' WHERE `user`='username';FLUSH PRIVILEGES;    
    功能            更改可访问IP
    new_host        新host 
    username        用户名
*************************************************
UPDATE `mysql`.`user` SET `authentication_string`=PASSWORD('new_password'),`plugin`='mysql_native_password' WHERE `user`='username';FLUSH PRIVILEGES;    
执行上一句出错时则执行下一名:
UPDATE `mysql`.`user` SET `password`=PASSWORD('new_password') where `user`='username';FLUSH PRIVILEGES;   
    功能            更改密码      
    new_password    新密码 
    username        用户名        
*************************************************
SELECT `User`,`Host` FROM mysql.`user`
    功能            查询用户
*****************************************************************************************
权限
*************************************************
用户与授权(使用root帐户管理)：
OPTION privileges ON database.table TO 'username'@'host'     
    功能            授权
    OPTION          操作。GRANT表示授权;REVOKE表示取消授权
    privileges      权限,多个权限使用','隔开,有以下权限:
                    ALL                         除GRANT OPTION和USAGE权限外的所有权限
                    ALTER                       使用ALTER TABLE命令的权限
                    ALTER ROUTINE               使用ALTER PROCEDURE和DROP PROCEDURE命令的权限
                    CREATE                      使用CREATE TABLE命令的权限
                    CREATE ROUTINE              使用CREATE PROCEDURE命令的权限 
                    CREATE TEMPORARY TABLES     使用CREATE TEMPORARY TABLE命令的权限
                    CREATE USER                 使用CREATE USER,DROP USER,RENAME USER,REVOKE ALL PRIVILEGES命令的权限
                    CREATE VIEW                 使用CREATE VIEW命令的权限
                    DELETE                      使用DELETE命令的权限
                    DROP                        使用DROP TABLE命令的权限
                    EXECUTE                     使用CALL和存储过程的权限
                    FILE                        使用SELECT INTO OUTFILE和LOAD DATA INFILE命令的权限
                    GRANT OPTION                使用GRANT和REVOKE命令的权限
                    INDEX                       使用CREATE INDEX和DROP INDEX命令的权限 
                    INSERT                      使用INSERT命令的权限 
                    LOCK TABLES                 使用LOCK TABLES命令的权限
                    PROCESS                     使用SHOW FULL PROCESSLIST命令的权限
                    RELOAD                      使用FLUSH的权限
                    REPLICATION CLIENT          使用查看复制状态的权限
                    REPLICATION SLAVE           使用复制的权限 
                    SELECT                      使用SELECT命令的权限
                    SHOW DATABASES              使用SHOW DATABASES命令的权限 
                    SHOW VIEW                   使用SHOW CREATE VIEW命令的权限  
                    SHUTDOWN                    使用mysqladmin shutdown命令的权限
                    SUPER                       使用CHANGE MASTER,KILL,LOGS,PURGE,MASTER,SET GLOBAL命令的权限 
                    UPDATE                      使用UPDATE命令的权限 
                    USAGE                       无权限 
    database        数据库名。*表示所有数据库 
    table           数据表名。*表示所有数据表 
    usename         用户名
    host            可登录地址
*****************************************************************************************
数据类型:
*********************************************************** 
tinyint,boolean,bool
*****************************
类型            整型
参数            无:(3) 
                (n):使用unsigned zerofill时,若占位宽度少于n位则用0在值的左侧填充补足到n位 
字面量          十进制值 null
字面示例        5 
有符号范围      -128 至 127 
无符号范围      0 至 255 
***********************************************************
smallint 
*****************************
类型            整型
参数            无:(5) 
                (n):使用unsigned zerofill时,若占位宽度少于n位则用0在值的左侧填充补足到n位 
字面量          十进制值 null
字面示例        15 
有符号范围      -32768 至 32767 
无符号范围      0 至 65535 
***********************************************************
mediumint 
*****************************
类型            整型
参数            无:(8) 
                (n):使用unsigned zerofill时,若占位宽度少于n位则用0在值的左侧填充补足到n位 
字面量          十进制值 null
字面示例        25 
有符号范围      -8388608 至 8388607
无符号范围      0 至 16777215 
***********************************************************
int,integer
*****************************
类型            整型
参数            无:(10)  
                (n),使用unsigned zerofill时,若占位宽度少于n位则用0在值的左侧填充补足到n位 
字面量          十进制值 null
字面示例        35
有符号范围      -2147483648 至 2147483647
无符号范围      0 至 4294967295 
***********************************************************
bigint 
*****************************
类型            整型
参数            无:(20)  
                (n),使用unsigned zerofill时,若占位宽度少于n位则用0在值的左侧填充补足到n位 
字面量          十进制值 null
字面示例        45 
有符号范围      -2^63 至 2^63-1 
无符号范围      0 至 2^64-1 
***********************************************************
decimal,dec,numeric,fixed 
***************************** 
类型            定点数字型(精确值),小数点作为定点单独存储 
参数            无:(10,0) 
                (n):(n,0) 
                (n,m):n表示有效位数,m表示小数点后的位数。使用unsigned zerofill时,若有效数字少于n位则用0在值的左侧填充补足到n位 
字面量          十进制值 null
字面示例        6 6.985 
有符号范围      负的n位9 到 n位9 
无符号范围      0 至 n位9 
***********************************************************
float  
***************************** 
类型            浮点数字型(单精度近似值)    
参数            无:(1)
                (n):当n取值[1-24]时,数据类型为float;当n取值[24-53]时数据类型为double;使用unsigned zerofill时,若占位宽度少于12则用0在值的左侧填充补足到12位
                (n,m):n表示有效位数,m表示小数点后的位数。当n>6时数字将变得不准确。使用unsigned zerofill时,若占位宽度少于n则用0在值的左侧填充补足到n位
字面量          十进制值 null
字面示例        6 6.211  
有符号范围      (-3.402823466E38 至 -1.175494351E-38) 和 (1.175494351E-38 至 3.402823466E38) 6位有效数字  
无符号范围      1.175494351E-38 至 3.402823466E38 6位有效数字 
***********************************************************
double,double precision,real 
***************************** 
类型            浮点数字型(双精度近似值)    
参数            无:使用unsigned zerofill时,若数据占位宽度少于22则用0在值的左侧填充补足到22位
                (n,m):n表示有效位数,m表示小数点后的位数。当n>15时数字将变得不准确。使用unsigned zerofill时,若占位宽度少于n则用0在值的左侧填充补足到n位
字面量          十进制值 null
字面示例        15 15.985 
有符号范围      (-1.7976931348623157E308 至 -2.2250738585072014E-308) 和 (2.2250738585072014E-308 至 1.7976931348623157E308) 15位有效数字 
无符号范围      2.2250738585072014E-308 至 1.7976931348623157E308 15位有效数字 
***********************************************************
year 
*****************************
类型            年份类型
参数            无:(4)
                (n):表示年的位数,取值[4] 
字面量          'YYYY'形式的字符串 YYYY形式的整数 null 
字面示例        '2019' 2019 
取值范围        '1901' 至 '2155' 或 '0000' 
*********************************************************** 
date
***************************** 
类型            日期类型
参数            无 
字面量          'YYYY-MM-DD'形式的字符串 'YYYYMMDD'形式的字符串 YYYYMMDD形式的整数 null
字面示例        '2019-11-05' '20191105' 20191105 
取值范围        '1000-01-01' 至 '9999-12-31' 
*********************************************************** 
time 
*****************************
类型            时间类型
参数            无:(0)
                (n):秒的小数位数,取值[0-6] 
字面量          '[-]HHH:MM:SS[.ssssss]'形式的字符串 null
字面示例        '-124:36:25.12345' 
取值范围        '-838:59:59.999999' 至 '838:59:59.999999'
***********************************************************
datetime
*****************************
类型            日期时间类型 
参数            无:(0)
                (n):秒的小数部分,取值[0-6] 
字面量          'YYYY-MM-DD HH:MM:SS[.ssssss]'形式的字符串 'YYYYMMDDHHMMSS.ssssss'形式的字符串 YYYYMMDDHHMMSS.ssssss形式的小数 null
字面示例        '2019-11-05 12:36:25.12345' '20191105123625.12345' 20191105123625.12345 
取值范围        '1000-01-01 00:00:00.000000' 至 '9999-12-31 23:59:59.999999'
***********************************************************
timestamp 
*****************************
类型            时间戳
参数            无:(0)
                (n):秒的小数部分,取值[0-6] 
字面量          'YYYY-MM-DD HH:MM:SS[.ssssss]'形式的字符串 'YYYYMMDDHHMMSS.ssssss'形式的字符串 YYYYMMDDHHMMSS.ssssss形式的小数 null
字面示例        '2019-11-05 12:36:25.12345' '20191105123625.12345' 20191105123625.12345  
取值范围        '1970-01-01 00:00:01.000000' 至 '2038-01-19 03:14:07.999999' 
***********************************************************
char 
*****************************
类型            定长存储字符串(始终占用n个字符的存储空间。长度不足时在右侧填充空格字符到指定的长度,计算、比较和返回结果前会自动去除右侧的空格) 
参数            无:(1)
                (0):只能存储null或空字符串 
                (n):当前字符集下的存储的最大字符串长度,取值[0-255] 
字面量          字符串 null 
字面示例        'abc' 
***********************************************************
varchar
*****************************
类型            变长存储字符串
参数            (0):只能存储null或空字符串  
                (n):当前字符集下的存储的最大字符串长度,取值[0-65535]。字符串占用的存储大小不得超过65535字节 
字面量          字符串 null 
字面示例        'abcd' 
***********************************************************
tinytext
*****************************
类型            文本类型
参数            无 
字面量          字符串 null 
字面示例        'abcd' 
存储空间        255字节    
注              不能设置默认值 
                只能建立fulltext索引,建立其他索引时必须指明索引的长度,例:alter table test add key t(text_field(10));
***********************************************************
text
***************************** 
类型            文本类型
参数            无。字符占用存储不可超过65535字节  
                (n):自动根据n的大小选择能够存储n个字符的数据类型,可自动选择的类型有tinytext,text,mediumtext,longtext:
                        当n在范围[0-63]时自动选用tinytext类型
                        当n在范围[64-16383]时自动选用tinytext类型
                        当n在范围[16384-4194303]时自动选用mediumtext类型
                        当n在范围[4194304-4294967295]时自动选择longtext类型 
字面量          字符串 null 
字面示例        'abcd' 
存储空间        65535字节  
注              不能设置默认值
                只能建立fulltext索引,建立其他索引时必须指明索引的长度,例:alter table test add key t(text_field(10));
***********************************************************
mediumtext
*****************************
类型            文本类型
参数            无。字符占用存储不可超过16777215字节 
字面量          字符串 null 
字面示例        'abcd'  
存储空间        16777215字节 
注              不能设置默认值
                只能建立fulltext索引,建立其他索引时必须指明索引的长度,例:alter table test add key t(text_field(10));
*********************************************************** 
longtext
*****************************
类型            文本类型
参数            无。字符占用存储不可超过4294967295字节 
字面量          字符串 null 
字面示例        'abcd'
存储空间        4294967295字节 
注              不能设置默认值
                只能建立fulltext索引,建立其他索引时必须指明索引的长度,例:alter table test add key t(text_field(10));
*********************************************************** 
bit     
***************************** 
类型            位类型(左填充) 
参数            无:(1)
                (n):表示位数,取值[1-64] 
字面量          十六进制值 二进制值 ASCII及扩展字符串 null  
字面示例        0x4141 0b0100000101000001 'AA'
存储空间        n位
注              左填充,在使用的位数没有达到n值时,在值的左侧填充0到n位 
                两位十六进制表示8位,使用十六进制时须保证n能存储十六进制所表示的位数
                八位二进制表示8位 
                一个ASCII字符或ASCII扩展字符表示8位,使用字符时须保证n能存储字符串所表示的位数 
***********************************************************
binary
*****************************
类型            字节型(右填充) 
参数            无:(1)
                (0):只能存储null或空字符串
                (n):字符串占用的最大字节大小,取值[0-255] 
字面量          十六进制值 二进制值 ASCII及扩展字符串 null 
字面示例        0x4141 0b0100000101000001 'AA'
存储空间        n字节
注              右填充,在使用的字节数没有达到n时,在值的右侧使用字节0x00填充
                两位十六进制表示1字节
                八位二进制表示1字节
                一个ASCII字符或ASCII扩展字符表示1字节
*********************************************************** 
varbinary
*****************************
类型            字节型(无填充)  
参数            (0):只能存储null或空字符串  
                (n):当前字符集下的存储的最大字节长度,取值[0-65535]  
字面量          十六进制值 二进制值 ASCII及扩展字符串 null 
字面示例        0x4141 0b0100000101000001 'AA'
存储空间        n字节 
注              无填充,从左至右以字节为最小粒度存储 
***********************************************************
tinyblob
*****************************
类型            字节型(无填充)  
参数            无
字面量          十六进制值 二进制值 ASCII及扩展字符串 null 
字面示例        0x4141 0b0100000101000001 'AA'
存储空间        255字节 
注              不能设置默认值 
                只能建立fulltext索引,建立其他索引时必须指明索引的长度,例:alter table test add key t(blob_field(10));
***********************************************************
blob
*****************************
类型            字节型(无填充)  
参数            无。占用存储不可超过65535字节  
                (n):自动根据n的大小选择能够存储n个字节的数据类型,可自动选择的类型有tinyblob,blob,mediumblob,longblob:
                        当n在范围[0-255]时自动选用tinyblob类型 
                        当n在范围[256-65535]时自动选用blob类型 
                        当n在范围[65536-16777215]时自动选用mediumblob类型
                        当n在范围[16777215-4294967295]时自动选择longblob类型 
字面量          十六进制值 二进制值 ASCII及扩展字符串 null 
字面示例        0x4141 0b0100000101000001 'AA'
存储空间        65535字节 
注              不能设置默认值 
                只能建立fulltext索引,建立其他索引时必须指明索引的长度,例:alter table test add key t(blob_field(10));
***********************************************************
mediumblob
*****************************
类型            字节型(无填充)  
参数            无
字面量          十六进制值 二进制值 ASCII及扩展字符串 null 
字面示例        0x4141 0b0100000101000001 'AA'
存储空间        16777215字节 
注              不能设置默认值 
                只能建立fulltext索引,建立其他索引时必须指明索引的长度,例:alter table test add key t(blob_field(10));
***********************************************************
longblob
*****************************
类型            字节型(无填充)  
参数            无 
字面量          十六进制值 二进制值 ASCII及扩展字符串 null 
字面示例        0x4141 0b0100000101000001 'AA'
存储空间        4294967295字节 
注              不能设置默认值 
                只能建立fulltext索引,建立其他索引时必须指明索引的长度,例:alter table test add key t(blob_field(10));
***********************************************************
enum 
*****************************
类型            枚举(单选) 
参数            枚举值,每个字符串使用逗号(,)分隔。
                枚举索引,从1开始自增,分别对应一个枚举值,枚举索引0对应空字符串,枚举索引NULL对应NULL 
                最多只能有65535个不同的枚举值 
                每个枚举值不能超过255个字符并且占用的存储空间不能超过1020字节,枚举值的末尾空格会被自动去除
                例:enum('男','女','未知') 
字面量          在参数中定义好的枚举值 枚举索引
字面示例        枚举值或枚举索引
                '男'或1 '女'或2 '未知'或3 
注              当插入的字符串'A'不在参数定义中的枚举值时会将其强制转换为数字A。如果这个数字A对应一个枚举索引则插入该枚举索引A,否则插入枚举索引0 
                枚举类型默认使用枚举索引排序
                如果要使用枚举值排序,则应使用以下语句之一:
                    ORDER BY CAST(enum_column_name AS CHAR) 
                    ORDER BY CONCAT(enum_column_name) 
                    order by field(enum_column_name,'女','男','未知','') 
                对于删除或修改或添加已经存在的枚举值会影响所有的行,对于新加没有使用过的枚举值则不会影响任何一行 
***********************************************************
set
*****************************
类型            复选
参数            复选值,每个字符串使用逗号(,)分隔。
                复选索引,从1开始倍增,分别对应一个复选值,复选索引0对应空字符串,复选索引NULL对应NULL 
                最多只能有64个不同的复选值
                每个复选值不能超过255个字符并且占用的存储空间不能超过1020字节,复选值的末尾空格会被自动去除
                例:set('男','女','未知') 
字面量          多个复选值使用逗号(,)拼接的字符串 多个复选索引值相加
                '男,女'或3 '男,女,未知'或7 
注              当插入的单个字符串'A'不在参数定义中的复选值时会将其强制转换为数字A。如果这个数字A对应一个复选索引则插入该复选索引A,否则插入复选索引0 
                复选类型默认使用复选索引排序
                对于删除或修改或添加已经存在的复选值会影响所有的行,对于新加没有使用过的复选值则不会影响任何一行 
***********************************************************

***********************************************************
***********************************************************
***********************************************************






   BIGINT
   BINARY
   BIT
   BLOB
   BLOB DATA TYPE
   BOOLEAN
   CHAR
   CHAR BYTE
   DATE
   DATETIME
   DEC
   DECIMAL
   DOUBLE
   DOUBLE PRECISION
   ENUM
   FLOAT
   INT
   INTEGER
   LONGBLOB
   LONGTEXT
   MEDIUMBLOB
   MEDIUMINT
   MEDIUMTEXT
   SET DATA TYPE
   SMALLINT
   TEXT
   TIME
   TIMESTAMP
   TINYBLOB
   TINYINT
   TINYTEXT
   VARBINARY
   VARCHAR
   YEAR DATA TYPE





*****************************************************************************************
更改表引擎:
alter table TABLE_NAME engine=ENGINE_NAME 
        功能        更改表引擎或重建表索引。当ENGINE_NAME与原来的引擎名相同时功能为更改表引擎,不同时则可用于重建索引。
        TABLE_NAME  表名 
        ENGINE_NAME 引擎名 
        示例        alter table T engine=InnoDB
*****************************************************************************************
性能分析：
***********************
profiling:
***********************
set profiling=1                                             //开启profiling性能分析工具
set profiling=0                                             //关闭profiling性能分析工具
show profiles                                               //数据库查询记录,可以查询queryID
show profile 参数 for query queryID                         //查询queryID语句的执行性能，多个参数应使用','隔开
                                                            //无参数                 查询执行时间
                                                            //无for query queryID    查询上一条语句的相关性能
                                                            //参数：all              所有性能信息  
                                                            //参数：block io         读写性能
                                                            //参数：context switches 上下文切换性能
                                                            //参数：cpu              cpu性能
                                                            //参数：ipc              消息信息
                                                            //参数：memory           内存信息,未来实现
                                                            //参数：page faults      页面故障
                                                            //参数：source           源代码信息
                                                            //参数：swaps            交换次数性能     
***********************                                                           
explain:
***********************
explain 查询语句                                             //查询语句即正常使用的mysql查询语句。返回分析结果表
                                                             //
*************************************************
*************************************************
*************************************************
*************************************************
*************************************************
*************************************************
*************************************************
*************************************************
*************************************************
*************************************************
*************************************************
select ... from
作用：返回选择的临时表
...的含义：选择的字段
from的作用：限制选择来源的表、临时表或结果集
*************************************************
from ... (where)
作用：返回符合条件的结果集
...的含义：选择的表、临时表或结果集
where的作用：选择条件
*************************************************
join ... (on)：
作用：返回联结表后生成的结果集
...的含义：联结表名
on的作用：联结条件
join(默认为：inner join)
*************************
left join: 返回左表所有结果集，即使右表不符合联结条件
right join:返回右表所有结果集，即使左表不符合联结条件
inner join:返回符合联结条件的结果集
full join: 返回左表和右表合并的结果集，即使左表与右表都存在不符合联结条件的行
*************************************************
group by ... (having):
作用：分组及筛选
...的含义：分组字段
having的作用：筛选条件，可以使用聚合函数。
*************************************************
distinct：
作用：去除重复
注意：distinct必须放在字段名的第一个位置,它作用于所有列出的字段
使用方法：设table表有name,id字段
1:作用于单列
  select distinct name from table;                                            //返回去重后的name列
2:使用于多列
  select distinct name,id from table;                                         //返回name和id都不重复的name和id列(先作用于name,得出结果再作用于id)
3:count统计
  select count(distinct name) from table;                                     //统计去除重复后的name的数量
  select count(distinct name,id) from table;                                  //统计name和id都不重复的数量(mysql可以使用,其他的数据库可用性未知,可以参考下一条示例)
  select count(*) from ((select distinct name,id from table) as temp_table);  //与上一条示例作用相同，适用于大多数数据库
*************************************************
order by
作用：排序
使用方法：设某表有id,name字段
1:使用某一列升序。不指定升序还是降序时默认为升序
    order by id
    order by id asc
2:使用某一列降序
    order by id desc
3:使用多列排序时，每个列使用逗号隔开，同时应该每个列都指定排序方式。在排序时优先使用第一列排序，在不改变第一列排序规则的情况下，使用第二列排序
    order by id desc,name 
4:使用某一列的指定序列排序。下例表示使用id列进行排序，排序方式为列表key1,key2,key3....(此列表视作升序)的顺序。当id中的存在值不在列表key1,key2,key3....中时，对于在列表key1,key2,key3....中的值仍旧按照此列表排序，不在此列表中的值使用指定的顺序排序(默认为升序)，并视按列表排序的整体作为最大值。 
    order by field(id,key1,key2,key3.....) desc
    order by field(id,key1,key2,key3.....) asc 
    order by field(id,key1,key2,key3.....) desc,name desc  
************************************************* 
示例解释：
*************************
select order_num,name,id,count(distinct name,id) from mytest group by name;

选择order_num,name,id,count(distinct name,id)字段作为表格，从mytest表中查询数据，通过name字段分组

order_num                   //行数为mytest的总行数
name                        //行数为mytest的总行数
id                          //行数为mytest的总行数
count(distinct name,id)     //一行

group by name               //通过name字段分组,总行数限制为name分组后的行,count(distinct name,id)值拆分为相同name对应的值
*************************************************

常用：
查看正在执行的查询
SELECT * FROM information_schema.`processlist` WHERE `COMMAND`<>'Sleep' ORDER BY TIME DESC 