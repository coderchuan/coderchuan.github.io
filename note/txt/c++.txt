****************************************************
C++内置类型前缀,后缀和数字中的符号:
*************************
字符与字符串:  
前缀        类型           编码                
u8          char           utf8                
L           wchar_t        utf16或utf32          
u           char16_t       utf16               
U           char32_t       utf32 
*************************
数字
后缀        类型
u或U        unsigned
l或L        long或long double
ll或LL      long long
f或F        float
*************************              
数制
前缀        数制
无前缀      十进制
0           八进制
0x或0X      十六进制
*************************
运算符号
符号        意义
e或E        指数运算符
****************************************************
转义符(\)
*************************
转义表达式   含义
\n           换行
\r           回车
\v           纵向制表符
\t           横向制表符
\b           退格
\\           反斜线
\?           问号
\f           进纸符
\a           响铃
\"           双引号
\'           单引号
\0           空字符(C型字符串结尾)
\八进制数字  八进制ASCII码对应的字符
\x十六进制   十六进制ASCII码对应的字符     
****************************************************
C++异常
*************************
try{...}         //...表示要执行的语句
thcolumn ...        //...表示抛出的数据,一般此语句放在try的语句块中
catch(...){}     //...表示将要捕获的数据类型,如果thcolumn抛出的数据类型与此语句的数据类型相同,将会执行{}中的处理语句
****************************************************
内存动态分配与释放:
*************************
new              //为指针分配一个内存相应类型的数据类型的空间,并返回地址.
                 //如果内存分配失败,则抛出bad_alloc类异常.
delete           //删除一个指针的内存,这个指针的内存一般是由new分配的
delete []        //删除一个数组指针的内存,这个数组的内存一般是由new分配的
*************************
内存动态分配与释放的应用示例之二维数组的分配与释放:
分配一个8*9(8列9行)的数组
1.一维和二维长度都未知
int column=8;                    //定义一维长度
int row=9;                       //定义二维长度
int ** a=nullptr;                //定义一维和二维长度都未知的二维指针
a=new int * [column]             //分配一维长度已知二维长度未知的二维指针
for(int i=0;i<column;++i)        //分配内存
{
    a[i]=new int a[row];
}
for(int i=0;i<column;++i)        //释放内存
{
    delete [] a[i]
}
2.二维长度未知
int column=8;                    //定义一维长度
int row=9;                       //定义二维长度
int * a[column];                 //定义一维长度已知二维长度未知的二维指针
for(int i=0;i<column;++i)        //分配内存
{
    a[i]=new int a[row];
}
for(int i=0;i<column;++i)        //释放内存 
{
    delete [] a[i]
}
3.一维长度未知
int column=8;                    //定义一维长度
int row=9;                       //定义二维长度
int (*a)[row]                    //定义一维长度未知二维长度已知的二维指针,增量内存为row个int的类型的二维指针
a=new int[column][row]           //为增量内存为row个int的指针类型分配内存
delete [] a                      //释放内存
**************************************************** 
数据类型:
*************************
算术类型：
布尔型(真假型)：
bool                               //单字节(取决于实现)整型变量，布尔类型，存储0和1
字符型：
char                               //单字节ANSI字符变量(默认前缀u8)，工作在多种编码编辑器中，文本存储为UTF-8，输出函数为printf、cout，输入函数为scanf、cin
wchar_t                            //双/四字节unicode变量(前缀L), 文本存储为UTF-16/32编码.(注意：输出支持不完善。输出函数为printf、wprintf、wcout，输入函数为scanf、wscanf、wcin)
char16_t                           //双字节unicode变量(前缀u)，文本存储为UTF-16编码，输出文本为locale编码。没有输入输出函数
char32_t                           //四字节unicode变量(前缀U)，文本存储为UTF-32编码，输出文本为locale编码。没有输入输出函数
整型：
signed char与unsigned char         //单字节(取决于实现)整型变量，存储整数[-2^7,2^7-1]  无符号不能表示负数，可以扩大正数范围为[0,2^8]
short与unsigned short              //双字节(取决于实现)整型变量，存储整数[-2^15,2^15-1]无符号不能表示负数，可以扩大正数范围为[0,2^16]
int与unsigned int                  //双字节(取决于实现)整型变量，存储整型[-2^15,2^15-1]无符号不能表示负数，可以扩大正数范围为[0,2^16]
long与unsigned long                //四字节(取决于实现)整型变量，存储整型[-2^31,2^31-1]无符号不能表示负数，可以扩大正数范围为[0,2^32]
long long与unsigned long long      //八字节(取决于实现)整型变量，存储整型[-2^63,2^63-1]无符号不能表示负数，可以扩大正数范围为[0,2^64]
小数型：
float与unsigned float              //四字节(取决于实现)浮点变量，单精度形，6位有效数字
double与unsigned double            //八字节(取决于实现)浮点变量，双精度形，10位有效数字
long double与unsigned long double  //12字节(取决于实现)浮点变量，长双精度形，10位有效数字
*************************
字符串型：
string                             //char组成的变量(默认前缀u8)。输出函数为cout，输入函数为cin
wstring                            //wchar_t组成的变量(前缀L)。(注意：输出支持不完善。输出文本为locale编码。输出函数为wcout，输入函数为wcin)
*************************
setlocale函数的使用:
注意：使用wchar_t、char16_t、char32_t都必须设置setlocale代码页。
作用：当程序(使用wchar_t)与系统进行字符交互(如输入字符，输出字符)时，通过设置的setlocale来进行UTF-16与相应的代码页之间的编码转换。
setlocale(LC_ALL,".936");//""中可以输入".+代码页"，简体中文的代码页为936，因此可以写为".936"。也可以写语言全称或缩写"Chinese-Simplified"，"chs"。如果""中什么也不填，那么将会设置本地语言代码页。
部分区域的代码页：
简体中文区域编码 936                      chs Chinese-Simplified
繁体中文区域编码 950或10002或20001或20002 cht Chinese-Traditional
美式英语区域编码 437
英式英语区域编码 20285
韩文区域编码     949
日语区域编码     10001
UTF-8国际编码    65001

示例：
#include <locale.h>                 //设置代码页的头文件
#include <iostream>
using namespace std;
int main(void)
{
setlocale(LC_ALL, ".936");          //设置代码页为936，简体中文,返回字符串类型;
wchar_t a[]=L"中文国际wchar_t";     //为wchar_t赋值
char16_t b[]=u"中文国际char16_t";   //为char16_t赋值
char32_t c[]=U"中文国际char32_t";   //为char32_t赋值
printf("%ls\n",a);                 //输出wchar_t变量的值，wchar_t专用的输出格式。
printf("%ls\n",b);                 //输出char16_t变量的值，由于char16_t与wchar_t都是双字节字符变量，因此可以输出。
printf("%ls\n",c);                 //输出char32_t变量的值，无法正常输出，暂无办法。
return 0;
}
*************************
字符(串)输入输出：(涉及cout的输入或输出需要添加头文件#include<iostream>,并且添加using namespace std;语句)
char字符的输入:(假设有一个字符变量char c)
cin>>a;                      //从键盘中输入一个字符,不包括' '或'\n'或'\t',以'\n'确认输入完毕,多余字符与缓存到输入流中;
scanf("%c",&a);              //从键盘中输入一个字符,包括' '或'\n'或'\t',以'\n'确认输入完毕,多余字符缓存到输入流中;
cin.get(a);或a=cin.get();    //从键盘中输入一个字符,包括''或'\n'或'\t',以'\n'确认输入完毕,多余字符缓存到输入流中;要注意的是：cin.get(a)遇到文件尾时将返回值设置为0，而a=cin.get()是将返回值设置为EOF;
a=getchar();                 //从键盘中输入一个字符,包括' '或'\n'或'\t',以'\n'确认输入完毕,多余字符缓存到输入流中;
a=getch();                   //#include<conio.h>先清空输入流,从键盘输入字符包括' '或'\n'或'\t',不显示且自动确认;
a=getche();                  //#include<conio.h>先清空输入流,从键盘输入字符包括' '或'\n'或'\t',显示且自动确认;
char字符的输出：
printf("%c\n",a);            //方式一
cout<<a<<endl;               //方式二
putchar(a);                  //方式三
cout.put(a);                 //方式四
cout<<(int)a<<endl;          //把字符输出为整型，强制转换方式一
cout<<int(a)<<endl;          //把字符输出为整型，强制转换方式二
wchar_t字符的输入：与iostream(cin和cout)的输入输出方法相同
wcin>>a;                     //wchar_t的输入，需要在代码中首先设置std::ios::sync_with_stdio(false),设置之后不能使用wscanf、scanf;
wscanf(L"%lc",a);            //wchar_t的输入
scanf("%lc",a);              //wchar_t的输入
wchar_t字符的输出：
wcout<<a<<endl;              //wchar_t的输出，需要在代码中首先设置std::ios::sync_with_stdio(false),设置之后不能使用wprintf、printf;
wprintf(L"%lc",a);           //wchar_t的输出
printf("%lc",a);             //wchar_t的输出

char字符串的输入：(假设有一个字符串变量char name[30])
scanf("%s",name);            //遇到' '或'\t'或'\n'时则停止获取字符串,并且遇'\n'确认输入完毕,字符串末端且用'\0'追加,输入的' '或'\t'或'\n'及其之后的内容缓存在输入流中;
cin>>name;                   //遇到' '或'\t'或'\n'时则停止获取字符串,并且遇'\n'确认输入完毕,字符串末端且用'\0'追加,输入的' '或'\t'或'\n'及其之后的内容缓存在输入流中;
gets(name);                  //遇到' '或'\t'或'\n'时不会停止获取字符串,并且遇'\n'确认输入完毕,'\n'存储在字符串末端且用'\0'将其替换;
cin.getline(name,30);        //遇到' '或'\t'或'\n'时不会停止获取字符串,并且遇'\n'确认输入完毕,'\n'存储在字符串末端且用'\0'将其替换,,30表示定义的数组的长度;
cin.getline(name,30,'#');    //将截止符'\n'换为'#','#'存储在字符串末端且用'\0'将其替换,'\n'确认输入完毕,如果输入完毕时没有达到30且没有遇到'#',则继续输入;
cin.get(name,30);            //遇到' '或'\t'或'\n'时不会停止获取字符串,并且遇'\n'确认输入完毕,将'\0'追加在字符串之后,30表示定义的数组的长度,'\n'缓存在输入流中,可用不带参数的cin.get()来处理这个多余的'\n',例如可以这样写:cin.get(name,30);cin.get();或cin.get(name,30).get();
cin.get(name,30,'#');        //将截止符'\n'换为'#','#'将会缓存在输入流中，'\n'确认输入完毕,如果输入完毕时没有达到30且没有遇到'#',则继续输入;
cin.ignore(30,'a');          //读取并丢弃接下来的30个字符，直到遇到字符'a',也适用于string字符串类型;
cin.read(c,10);              //输入10字节的内容到char型数组中，但是它没有结束标记'0',以回车结束,并且10字节之后的内容被缓存在输入流中;
cin.peek();                  //判定输入流中下一个字符是不是所要求的字符while(cin.peek()=='A');
cin.putback();               //在输入流中插入一个字符;
char字符串的输出：
printf("%s",name);           //输出字符串name;
cout<<name;                  //输出字符串name;
puts(name);                  //输出字符串name,并且自动添加'\n';
string字符串的输入：
cin>>name;                   //遇到' '或'\t'或'\n'时则停止获取字符串,并且遇'\n'确认输入完毕,字符串末端且用'\0'追加,输入的' '或'\t'或'\n'及其之后的内容缓存在输入流中;
getline(cin,name);           //遇到' '或'\t'或'\n'时不会停止获取字符串,并且遇'\n'确认输入完毕,'\n'存储在字符串末端且用'\0'将其替换.
string字符串的输出：
cout<<name;                  //输出字符串name
wchar_t字符串的输入：与iostream(cin和cout)的输入输出方法相同
wcin>>a;                     //wchar_t的输入，需要在代码中首先设置std::ios::sync_with_stdio(false),设置之后不能使用wscanf、scanf;
wscanf(L"%ls",a);            //wchar_t的输入
scanf("%ls",a);              //wchar_t的输入
wchar_t字符串的输出：
wcout<<a<<endl;              //wchar_t的输出，需要在代码中首先设置std::ios::sync_with_stdio(false)设置之后不能使用wprintf、printf;
wprintf(L"%ls",a);           //wchar_t的输出
printf("%ls",a);             //wchar_t的输出
wstring字符串的输入：
wcin>>name;                  //遇到' '或'\t'或'\n'时则停止获取字符串,并且遇'\n'确认输入完毕,字符串末端且用'\0\0'追加,输入的' '或'\t'或'\n'及其之后的内容缓存在输入流中;
getline(wcin,name);          //遇到' '或'\t'或'\n'时不会停止获取字符串,并且遇'\n'确认输入完毕,'\n'存储在字符串末端且用'\0\0'将其替换.
wstring字符串的输出：
wcout<<name;                 //输出wstring
*************************
char字符串的操作：
strcmp(a,b)                  //对比字符串a,b，如果相同返回0，a大于b返回正差值，a小于b返回负差值
strcpy(a,b)                  //把b复制到a中
strcat(a,b)                  //把b接到a的后面
strlen(a)                    //返回a的长度
strchr(a,char c)             //在字符串a中查找字符c首次出现的地址
strstr(a,b)                  //在字符串a中查找字符串b首次出现的地址
wchar_t字符串的操作：
wcscmp(a,b)                  //对比字符串a,b，如果相同返回0，a大于b返回正差值，a小于b返回负差值
wcscpy(a,b)                  //把b复制到a中
wcscat(a,b)                  //把b接到a的后面
wcslen(a)                    //返回a的长度
wcschr(a,wchar_t c)          //在字符串a中查找字符c首次出现的地址
wcsstr(a,b)                  //在字符串a中查找字符串b首次出现的地址
****************************************************
peek()与putback()流操作:
*************************
peek()                       //从流中获取当前指针位置的字符值
putback(char c)              //在流的当前指针位置前添加一个字符c
*************************
peek()示例:
#include<iostream>
#include<string>
using namespace std;
int main(void)
{
while(cin.peek()!='l')cout<<(char)getchar();
return 0;
}
输入yangchuanl,则输出yangchuan
*************************
putback()示例：
#include<iostream>
#include<string>
using namespace std;
int main(void)
{
char ch;
while((ch=cin.get())!='#')cout<<ch;
cin.putback(ch);
cout<<endl<<(ch=cin.get())<<endl;
while((ch=cin.get())!='\n')cout<<ch;
cout<<endl;
return 0;
}
输入Pan#Yaru,则输出:
Pan
#
Yaru
****************************************************
字符与字符集:
*************************
字符集：是一系列字符的集合。
字符编码：与字符集中某个字符唯一对应的一个二进制编码，亦作内码。
代码页：区域文字编码代号。简体中文的代码页为：936
*************************
常见编码：
1、本地编码(包含ASCII码)
2、UTF-8编码(包含ASCII码)
3、UTF16-little编码
4、UTF16-big编码
5、UTF32-little编码
6、UTF32-big编码
*************************
Unicode字符集：包含世界所有国家文字的字符集(是各个国家和区域的字符的集合)，支持多种编码方式，如下：
ASCII编码：    编码采用单字节编码，编码处于十进制[0,127]。
UTF-8编码：    编码采用变字节编码方式，若编码大小处于十进制[0,127]采用单字节编码，编码大于127采用多字节编码。最多六个字节。例如双字节编码时，第一个字节的前两位为1第三位为0，第二个字节第一位为1第二位为0；采用三字节编码时，第一个字节的前三位为1第四位为0，第二个字节第一位为1第二位为0，第三个字节第一位为1第二位为0。由于采用变字节编码，因此兼容ASCII码。
UTF-16编码：   编码采用定2字节编码方式，使用两个字节编码。不能兼容ASCII码。
UTF-32编码：   编码采用定4字节编码方式，使用两个字节编码。不能兼容ASCII码。
*************************
GB2312字符集： 中国国家标准。它支持的编码有：
ASCII编码：    编码采用单字节编码，编码处于十进制[0,127]。
GB2312编码：   编码采用变字节编码方式，若编码大小处于十进制[0,127]采用单字节编码，编码大于127采用双节编码，第一个字节一定大于127。由于采用变字节编码，因此兼容ASCII码。
*************************
GBK字符集：    微软制定的包含简体中文的一个字符集。它支持的编码有：
ASCII编码：    编码采用单字节编码，编码处于十进制[0,127]。
GB2312编码：   编码采用变字节编码方式，若编码大小处于十进制[0,127]采用单字节编码，编码大于127采用双节编码，第一个字节一定大于127。由于采用变字节编码，因此兼容ASCII码。
GBK编码：      编码采用变字节编码方式，若编码大小处于十进制[0,127]采用单字节编码，编码大于127采双节编码，第一个字节一定大于127。由于采用变字节编码，因此兼容ASCII码。
*************************
GB18030字符集：中国国家标准。它支持的编码有：
ASCII编码：    编码采用单字节编码，编码处于十进制[0,127]。
GBK编码：      编码采用变字节编码方式，若编码大小处于十进制[0,127]采用单字节编码，编码大于127采双节编码，第一个字节一定大于127。由于采用变字节编码，因此兼容ASCII码。
GB2312编码：   编码采用变字节编码方式，若编码大小处于十进制[0,127]采用单字节编码，编码大于127采用双节编码，第一个字节一定大于127。由于采用变字节编码，因此兼容ASCII码。
GB18030编码：  编码采用变字节编码方式，若编码大小处于十进制[0,127]采用单字节编码，编码大于127采用多字节编码，最多四个字节，第一个字节一定大于127。由于采用变字节编码，因此兼容ASCII码。
*************************
Big5字符集：   港奥台繁体字符集。它支持的编码有：
ASCII编码：    编码采用单字节编码，编码处于十进制[0,127]。
Big5编码：     编码采用变字节编码方式，若编码大小处于十进制[0,127]采用单字节编码，编码大于127采双节编码，第一个字节一定大于127。由于采用变字节编码，因此兼容ASCII码。
****************************************************
转义字符的使用：
************************
'\'是转义符号，它可以把所要转义的符号直接存进变量中,一般后面的数字会被认为是八进制
************************
转义数字：
char a='\10';     表示把八进制数字10存进变量a中。它表示一个ASCII符号
char a='\xf';     表示把十六进制数字f存进变量a中,x表示十六进制前缀。它表示一个ASCII符号
************************
C++转义字符：
\a   响铃(BEL)
\b   退格(BS)
\f   换页(FF)
\n   换行(LF)
\r   回车(CR)
\t   水平制表(HT)
\v   垂直制表(VT)
\\   反斜杠
\?   问号字符
\'   单引号字符
\"   双引号字符
\0   空字符(NULL) 
\ddd 1-3位八进制所代表的任意字符
\xhh 1-2位十六进制所代表的任意字符
****************************************************
C++序列点(sequence point)：
************************
注意：在两个序列点之间，同一个变量最多只能被改变一次，如果多次改变，则会出现未定义的结果。  
序列点包括：
(1) 语句分割符(';');
(2) 逗号运算符(',')(参数分隔符','不是顺序点);
(3) 语句括号('('、')'、'{'、'}')(改变优先级的括号运算符'('、')'不是序列点);
(4) &&操作符的左操作数结尾处;
(5) ||操作符的左操作数结尾处;
(6) ?:操作符的第一个操作数的结尾处;
************************
例：
以下语句是错误的：
错误原由：第一个序列点(';')与第二个序列点(';')之间a=a++这条语句中a的值被改变了两次。
int a=0;                    //第一个序列点(';');
a=a++;                      //第二个序列点(';');

以下语句是正确的：
int a=0,b=0;                //第一个序列点(';'),这条语句中的逗号(',')是参数分割符;
b=a++;                      //第二个序列点(';');
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************
****************************************************

