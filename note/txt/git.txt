****************************************************************************************** 
git 
************************************************************
安装    
ubuntu      sudo apt install git  
debian      sudo apt install git  
centos      sudo yum install git 
windows     https://git-scm.com/download/win 下载合适的版本安装即可(64-bit Git for Windows Setup 选择 use mintty) 
************************************************************ 
git COMMAND [--help]                                                              
        功能    版本控制.使用ssh协议的git在开放端口中会验证当前登录的用户名和密码(私钥) 
        权限    当前用户 
        COMMAND 对应的参数与命令，例如diff、difftool、branch。具体用法详见下文 
        --help  获取COMMAND的帮助信息  
************************************************************ 
配置:
xxxxxxx可取以下值(优先级最高为1,以此类推): 
--local 局部配置(当前仓库配置，优先级为1)
--global 全局配置(计算机当前用户配置，优先级为2)
--system 系统配置(计算机所有用户配置，优先级为3) 
******************************
git config xxxxxxx --list                                                       //显示配置信息
git config xxxxxxx ATTRIBUTE_NAME                                               //显示指定的配置信息。ATTRIBUTE_NAME表示属性名称 
git config xxxxxxx --unset ATTRIBUTE_NAME                                       //删除指定的配置信息。ATTRIBUTE_NAME表示属性名称
git config xxxxxxx -e                                                           //编辑配置信息 
git config xxxxxxx user.name ____                                               //配置用户名。下划线表示用户名，用双引号括住
git config xxxxxxx user.email ____                                              //配置邮箱。下划线表示用户邮箱，用双引号括住
git config xxxxxxx core.editor "PATH -w"                                        //配置默认编辑器。PATH表示编辑器路径 
git config xxxxxxx difftool.NAME.cmd "PATH --wait --diff $LOCAL $REMOTE"        //配置差异编辑器名称。NAME表示自定义名称,PATH表示差异编辑器路径
git config xxxxxxx diff.tool NAME                                               //配置差异编辑器。NAME表示差异编辑器名称 
git config xxxxxxx credential.helper ""                                         //从不记住密码
git config xxxxxxx credential.helper store                                      //永久记住密码
git config xxxxxxx credential.helper manager                                    //Windows系统凭据配置
git config xxxxxxx credential.helper cache                                      //Linux系统凭据配置 
************************************************************ 
克隆[git clone命令使用的是用户配置(git config --global或git config --system)而不是仓库配置(git config --local)]
******************************
git clone ____                                  //下划线表示网络地址或文件地址。克隆远程仓库所有分支，并且在本地创建所有分支
git clone -b ____ ____                          //下划线分别表示远程分支名、网络地址或文件地址。克隆远程仓库所有分支，但是只在本地创建指定分支
git clone --single-branch -b ____ ____          //下划线分别表示远程分支名、网络地址或文件地址。克隆远程仓库指定分支，并且只在本地创建指定分支
************************************************************ 
仓库
******************************
git init --bare ____                            //创建中央(裸)仓库。下划线表示一个本地地址，裸仓库，无法看到文件，可接受提交(需要配置git config receive.denyCurrentBranch ignore)
git init ____                                   //创建工作仓库。下划线表示一个本地地址。创建一个空仓库，若无参数，则在当前目录下；若目录下已经存在一个仓库，则不创建。工作仓库，默认不可接受提交，若要使其接受提交，参照下一行。
git config receive.denyCurrentBranch ignore     //配置为可提交仓库 
git reset --hard                                //更新当前仓库的文件到最新状态，工作仓库作为可接受提交的仓库时，需此命令来更新当前代码。
************************************************************  
暂存区 
******************************
git add ____                                    //对暂存区的文件的新增和修改进行更新。____表示指定文件
git add -u                                      //对暂存区的文件的删除和修改进行更新 
git add --ignore-removal .                      //对暂存区的文件的新增和修改进行更新(git 2.0以上版本)
git add .                                       //对暂存区的文件的新增、修改和删除进行更新(git 2.0及以上版本。在git 1.0版本中此命令与git add --ignore-removal .功能相同)
git add -A                                      //对暂存区的文件的新增、修改和删除进行更新 
git rm --cached ____                            //下划线表示文件名。删除暂存区的文件
git rm ____                                     //下划线表示文件名。删除暂存区和工作区中的文件
git commit -m ____                              //下划线表示提交说明，用双引号括住。把暂存区中的文件提交到仓库
************************************************************
恢复
stash:恢复最后一次提交后的状态，并暂存工作区(文件已经使用git add添加到版本控制系统中)
reset:直接恢复到指定的历史状态
******************************
git stash                                       //暂存工作区，并恢复当前分支的干净工作区(最后一次提交后的状态)
git stash save ____                             //下划线表示当前的工作区的保存说明，字符串参数。暂存工作区，并恢复当前分支的干净工作区(最后一次提交后的状态)
git stash list                                  //查看暂存工作区列表
git stash pop                                   //恢复最新的暂存工作区(stash@{0})到当前分支的工作区，并删除暂存区
git stash pop stash@{____}                      //下划线表示暂存工作区的唯一序号，可以通过“git stash list”查看。恢复指定的暂存工作区到当前分支的工作区，并删除暂存区
git stash apply                                 //恢复最新的暂存工作区(stash@{0})到当前分支的工作区，不删除暂存区
git stash apply stash@{____}                    //下划线表示暂存工作区的唯一序号，可以通过“git stash list”查看，恢复指定的暂存工作区到当前分支的工作区，不删除暂存区
git reset --hard ____                           //下划线表示仓库的唯一编码，可以通过git log命令获得。省略下划线的参数则表示更新当前仓库的文件到最新状态，工作仓库作为可接受提交的仓库时，需要通过省略参数的此命令来更新当前代码。
************************************************************ 
差异对比
******************************
git diff ____                                   //在命令行下查看差异。下划线为文件名
git difftool ____                               //用工具查看编辑差异。下划线为文件名 
q                                               //退出差异查看
************************************************************
分支
******************************
git branch                                      //查看当前仓库下的本地分支
git branch -r                                   //查看当前仓库下的远程分支
git branch -a                                   //查看当前仓库下的所有分支
git branch ____                                 //下划线表示分支名，创建一个新的分支
git branch -d ____                              //下划线表示分支名，删除指定的分支
git branch -D ____                              //下划线表示分支名，强制删除指定的分支
git branch -m ____ ____                         //下划线分别表示原分支名、新分支名。分支重新命名
git branch -M ____ ____                         //下划线分别表示原分支名、新分支名。分支强制重新命名
git checkout ____                               //下划线表示分支名，切换当前分支到指定的分支 
git checkout ____ ____                          //第一个下划线表示分支名，第二个下划线表示文件名， 切换指定的文件到指定分支的未修改的状态；若省略第一个分支名，则表示把文件恢复到未修改的状态
git merge ____                                  //下划线表不分支名，合并指定的分支到当前的分支
git push ____ :____                             //下划线分别表示远程仓库别名、远程分支名。删除远程分支(此命令与远程操作中的同步本地分支到远程分支相同，但是补同步本地的分支名为空，即同步一个空的分支到远程仓库，因此远程仓库被删除)
************************************************************ 
提交日志 
******************************
git log                                         //查看所有的历史提交,使用上下按键来查看未显示完的历史记录，并显示唯一编码
git log --after={____}                          //下划线表示时间，查看该时间之后的所有提交。时间的格式为2018-10-08-15:20
git log --before={____}                         //下划线表示时间，查看该时间之前的所有提交。时间的格式为2018-10-08-15:20
q                                               //退出查看历史状态 
************************************************************
远程
******************************
git remote add ____ ____                        //下划线分别表示远程仓库的别名、远程仓库地址。远程仓库地址可以使用多种协议，如：  
                                                    ssh://username@host[:port]/git_dir_path   私钥文件的指定详见~/.ssh/config配置  (ssh://git@github.com[:port]/git_dir_path) 
                                                    https://www.github.com[:port]/git_dir_path  
git remote                                      //查看所有远程仓库的别名 
git remote -v                                   //查看所有远程仓库的别名和地址
git remote rm ____                              //下划线表示远程仓库的别名，删除远程仓库
git remote set-url ____ ____ ____               //下划线分别表示远程仓库别名、新的远程仓库地址、旧的远程仓库地址，如果只有一个远程地址，可以省略第三个参数(旧的远程仓库地址)。更改远程仓库的地址
git remote set-url --add ____ ____              //下划线分别表示远程仓库别名、新的远程仓库地址。增加远程仓库的地址
git remote rm ____                              //下划线分别表示远程仓库别名。删除远程仓库的地址 
git remote prune ____                           //更新已经在远程仓库中已经删除的仓库，运行结果是已经删除的远程仓库在本地也会被删除
git fetch ____                                  //下划线表示远程仓库名，下载远程仓库的最新的所有分支到本地。它不会自动合并这个分支到本地同名分支，可以通过git branch -r查看
git fetch ____ ____                             //下划线表示远程仓库名、远程分支名，下载指定远程仓库的分支到本地。它不会自动合并这个分支到本地同名分支，可以通过git branch -r查看
git fetch ____ ____:____                        //下划线表示远程仓库名、远程分支名、本地分支名，下载指定远程仓库的分支到本地，并在本地创建新的同名分支，如果分支已经存在，则会命令执行失败。它不会自动合并这个分支到本地同名分支，可以通过git branch -r查看
git push ____ ____:____                         //下划线分别表示远程仓库别名、本地仓库的分支、远程仓库的分支，将本地的分支同步到远程。冒号和最后一个参数可以省略，表示对远程同名的仓库分支进行操作
git push -u ____ ____:____                      //下划线分别表示远程仓库别名、本地仓库的分支、远程仓库的分支，将本地的分支同步到远程。-u参数表示把当前仓库与远程仓库的指定分支关联，关联后对此分支进行提交时仅需使用git push命令即可。
git push                                        //没有参数，使用git push -u ____ ____:____ 命令关联的仓库提交时仅需使用git push命令即可。
git pull ____ ____:____                         //下划线分别表示远程仓库别名、远程仓库的分支、本地仓库的分支，将远程的分支同步到本地。冒号和最后一个参数可以省略，表示对本地同名的仓库分支进行操作
git pull                                        //没有参数，使用git push -u ____ ____:____ 命令关联的仓库拉取时仅需使用git pull命令即可。
************************************************************
清理
******************************
git clean -xf                                   //删除当前仓库下没有被跟踪的文件.即使这些文件在.gitignore文件中指定,也会删除 
git clean -f                                    //删除当前仓库下没有被跟踪的文件.
git clean -df                                   //删除当前仓库下没有被跟踪的文件和文件夹.
git clean -f -n                                 //显示将会被删除的未被跟踪的文件.
git clean -df -n                                //显示将会被删除的未被跟踪的文件和文件夹.
************************************************************
git冲突解决：
******************************
冲突1：修改了文件但是没有执行git add命令，git pull时提示冲突
解决方法：git add;git stash;git pull;git stash pop;编辑冲突文件;git add;git commit;git push

冲突2：修改了文件且执行了git add命令，git pull时提示冲突
解决方法：git stash;git pull;git stash pop;编辑冲突文件;git add;git commit;git push 

冲突3：修改了文件且执行了git add;git commit命令，git pull时提示冲突 
解决方法：编辑冲突文件;git add;git commit;git push
